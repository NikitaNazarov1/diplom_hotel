require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::RoomCategoriesController do

  # This should return the minimal set of attributes required to create a valid
  # RoomCategory. As you add validations to RoomCategory, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {room_category: {name: 'Люкс'}} }
  let(:invalid_attributes) { {room_category: {neme: ''}} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RoomCategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    sign_in create(:admin)
  end

  describe 'GET index' do
    it 'assigns all room_categories as @room_categories' do
      room_category = create(:room_category)
      get :index, {}, valid_session
      assigns(:room_categories).should eq([room_category])
    end
  end

  describe 'GET show' do
    it 'assigns the requested room_category as @room_category' do
      room_category = create(:room_category)
      get :show, {:id => room_category.to_param}, valid_session
      assigns(:room_category).should eq(room_category)
    end
  end

  describe 'GET new' do
    it 'assigns a new room_category as @room_category' do
      get :new, {}, valid_session
      assigns(:room_category).should be_a_new(RoomCategory)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested room_category as @room_category' do
      room_category = create(:room_category)
      get :edit, {:id => room_category.to_param}, valid_session
      assigns(:room_category).should eq(room_category)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new RoomCategory' do
        expect {
          post :create, valid_attributes, valid_session
        }.to change(RoomCategory, :count).by(1)
      end

      it 'assigns a newly created room_category as @room_category' do
        post :create, valid_attributes, valid_session
        assigns(:room_category).should be_a(RoomCategory)
        assigns(:room_category).should be_persisted
      end

      it 'redirects to the created room_category' do
        post :create, valid_attributes, valid_session
        response.should redirect_to([:admin, RoomCategory.last])
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved room_category as @room_category' do
        # Trigger the behavior that occurs when invalid params are submitted
        post :create, invalid_attributes, valid_session
        assigns(:room_category).should be_a_new(RoomCategory)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        post :create, invalid_attributes, valid_session
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    let!(:room_category) { create(:room_category) }
    describe 'with valid params' do
      it 'updates the requested room_category' do
        # Assuming there are no other room_categories in the database, this
        # specifies that the RoomCategory created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        #RoomCategory.any_instance.should_receive(:update)
        put :update, { id: room_category.id, room_category: {name: 'Суперлюкс'} }, valid_session
        room_category.reload.name.should eq 'Суперлюкс'
      end

      it 'assigns the requested room_category as @room_category' do
        put :update, {:id => room_category.to_param, :room_category => valid_attributes}, valid_session
        assigns(:room_category).should eq(room_category)
      end

      it 'redirects to the room_category' do
        put :update, {:id => room_category.to_param, :room_category => valid_attributes}, valid_session
        response.should redirect_to([:admin, room_category])
      end
    end

    describe 'with invalid params' do
      it 'assigns the room_category as @room_category' do
        # Trigger the behavior that occurs when invalid params are submitted
        put :update, {:id => room_category.to_param, :room_category => {name: ''}}, valid_session
        assigns(:room_category).should eq(room_category)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        put :update, {:id => room_category.to_param, :room_category => {name: ''}}, valid_session
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    let!(:room_category) { create(:room_category) }
    it 'destroys the requested room_category' do
      expect {
        delete :destroy, {:id => room_category.to_param}, valid_session
      }.to change(RoomCategory, :count).by(-1)
    end

    it 'redirects to the room_categories list' do
      delete :destroy, {:id => room_category.to_param}, valid_session
      response.should redirect_to(admin_room_categories_url)
    end
  end

end
